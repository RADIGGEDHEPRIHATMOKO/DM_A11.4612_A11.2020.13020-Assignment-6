# -*- coding: utf-8 -*-
"""dt.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/152F7-tbh7JAoG5_jlkehTRk0mJqoi6wE
"""

#Import Library Scikit Learn untuk Decision Tree, Dataset & Matplotlib
from sklearn.tree import DecisionTreeClassifier
from sklearn import datasets
import matplotlib.pyplot as plt

#Load Dataset Iris dari library scikit learn
iris = datasets.load_iris()
features = iris['data']
target = iris['target']
print(target)

iris['feature_names']

iris['target_names']

# Membuat Objek Model Decision Tree
decisiontree = DecisionTreeClassifier(random_state=0, max_depth=None, 
                                      min_samples_split=2, min_samples_leaf=1,
                                      min_weight_fraction_leaf=0,
                                      max_leaf_nodes=None, 
                                      min_impurity_decrease=0)

#Mentraining Model Decision Tree
model = decisiontree.fit(features, target)

test = model.predict(features)

print(test)

#Mengambil sampel observasi dan membuat prediksi
#Sampel berupa data dimensi kelopak
#Fungsi predict() => memeriksa kelas yang dimilikinya
#Fungsi predict_proba() => memeriksa probabilitas kelas dari prediksi tersebut
observation = [[4, 3, 2, 1]]
model.predict(observation)
model.predict_proba(observation)

print(observation)
print(model.predict(observation))
# print(model.predict_proba(observation))

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(target, test)
print(cm)

import seaborn as sns
import matplotlib.pyplot as plt
f, ax = plt.subplots(figsize=(8,5))
sns.heatmap(confusion_matrix(target, test), annot=True, fmt=".0f", ax=ax)
plt.xlabel("test")
plt.ylabel("target")
plt.show()

from sklearn.metrics import classification_report
print (classification_report(target, test))

#Membuat grafik visualisasi Decision Tree
import pydotplus
from sklearn import tree
dot_data = tree.export_graphviz(decisiontree, out_file=None, 
                                feature_names=iris['feature_names'], 
                                class_names=iris['target_names'])
from IPython.display import Image
graph = pydotplus.graph_from_dot_data(dot_data)
Image(graph.create_png())
graph.write_png('iris.png')

from IPython.display import Image

Image(filename='iris.png')